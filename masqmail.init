#!/bin/sh
### BEGIN INIT INFO
# Provides:          masqmail
# Required-Start:    $local_fs $remote_fs $syslog $network $time
# Required-Stop:     $local_fs $remote_fs $syslog $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Starts and stops the masqmail daemon
# Description:       The masqmail daemon listens for incoming SMTP connections
#                    and processes its mail queue in regular intervals.
### END INIT INFO

# DON'T EDIT THIS FILE, use /etc/default/masqmail!

INIT_SMTP_DAEMON="false"
INIT_QUEUE_DAEMON="false"

PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Mail Transfer Agent (MTA)"
NAME=masqmail
DAEMON=/usr/sbin/$NAME
DAEMON_ARGS=
RUN_DIR=/var/run/$NAME
PIDFILE=$RUN_DIR/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME
QUEUE_DAEMON_IVAL=${QUEUE_DAEMON_IVAL:--q10m}

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

# Create /var/run/masqmail if /var/run/ is a tmpfs.
mkdir -p $RUN_DIR

[ "$INIT_SMTP_DAEMON" = true ] && DAEMON_ARGS="$DAEMON_ARGS -bd"
[ "$INIT_QUEUE_DAEMON" = true ] && DAEMON_ARGS="$DAEMON_ARGS $QUEUE_DAEMON_IVAL"

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	#   3 if daemon should not be started

	if [ "$INIT_SMTP_DAEMON" != true -a "$INIT_QUEUE_DAEMON" != true ]; then
		[ "$VERBOSE" != no ] && log_progress_msg "daemons are disabled. See /etc/default/$NAME"
		return 3
	fi

	if [ "$INIT_SMTP_DAEMON" = true ]; then
		# give a hint we start the smtp daemon
		[ "$VERBOSE" != no ] && log_progress_msg "listen"
	fi

	if [ "$INIT_QUEUE_DAEMON" = true ]; then
		# give a hint we start the queue daemon
		[ "$VERBOSE" != no ] && log_progress_msg "queue ($QUEUE_DAEMON_IVAL)"
	fi

	start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON --test > /dev/null \
		|| return 1
	start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON -- \
		$DAEMON_ARGS \
		|| return 2
	# Add code here, if necessary, that waits for the process to be ready
	# to handle requests from services started subsequently which depend
	# on this one.  As a last resort, sleep for some time.
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE --name $NAME
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
	start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
	[ "$?" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE
	return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload()
{
	start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
	return 0
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start

	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
		3) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
       status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
       ;;
  reload|force-reload)
	log_daemon_msg "Reloading $DESC" "$NAME"
	do_reload
	log_end_msg $?
	;;
  restart)
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
